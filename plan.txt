Plan:
--------------------------------------------------------------------------------------
Step 1. Change the numbers for YB AND XG,YG in my code.
--[DONE]------------------------------------------------------------------------------

OK, my 'd' numbers now match Brady (at least ABCGH) for lambda=1. To do this, I have:
Created convert_resistance_scalars_to_d_form_temp which CORRECTS the wrong minus signs on B and G in the Mathematica output file. YH is fine. This created a corrected scalars_general_resistance_blob_d file.


NOTE:
1. Brady code r2babc.dat is read as:
    /Users/adam/Documents/UCL/PhD/Python/FTE/helen_fortran/ASD code/Caltech/R2B
    But note Minfinity has been subtracted off.

    " Group A is what you need for lubrication data. The long range part
    coming from mobility matrix have been subtracted in these files.
    the columns are:
    r2babc.dat :
    rabc    X11a X12a Y11a Y12a Y11b Y12b X11c X12c Y11c Y12c
    r2bgh.dat:
    rgh     x11g x12g y11g y12g y11h y12h
    r2bm.dat:
    r2b        X11M+X12M    Y11M+Y12M    Z11M+Z12M "

2. I could also: compare my numbers with those from Running Amanda's Matlab code
    https://repository.library.brown.edu/studio/item/bdr:786342/

    This would provide a good comparison for lambda != 1.

--------------------------------------------------------------------------------------
Step 2. See what the consequences are in the simple test cases we were playing with earlier.
--------------------------------------------------------------------------------------
1. All things look fine. Giving Einfty gives correct U, Omega and S, according to Helen's Fortran code.




TODO:
6. Add plot_XYZ to gitignore, *.pyc
7. Do all the examples work
8. Look for any #comments
9. #!/usr/bin/env python
10.push!
